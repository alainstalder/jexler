subprojects {
  apply plugin: 'groovy'
  apply plugin: 'eclipse'
  apply plugin: 'maven'
  apply plugin: 'jacoco'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  version = '4.0.3-SNAPSHOT' // IMPORTANT: keep in sync with version in JexlerContextListener

  project.group = 'ch.grengine.jexler'

  ext {
    groovy4GroupId='org.apache.groovy'
    groovy4Version='4.0.9'
    spock4Version='2.4-M1-groovy-4.0'
    groovy3GroupId='org.codehaus.groovy'
    groovy3Version='3.0.15'
    spock3Version='2.4-M1-groovy-3.0'
    groovy2GroupId=groovy3GroupId
    groovy2Version='2.5.21'
    spock2Version='2.4-M1-groovy-2.5'

    groovyGroupId=groovy4GroupId
    groovyVersion=groovy4Version
    spockVersion=spock4Version

    grengineVersion='3.0.2'

    ivyVersion='2.5.1'
    slf4jVersion='1.7.36'
    logbackVersion='1.3.5'

    junitVersion='4.13.2'
    jansiVersion='1.18'
  }

  jar {
    manifest.attributes provider: 'gradle'
  }

  repositories {
    mavenCentral()
  }

  configurations {
    groovyDoc.extendsFrom runtime
    testArtifacts
  }

  dependencies {
    compile "$groovyGroupId:groovy:$groovyVersion"
    compile("ch.artecat.grengine:grengine:$grengineVersion") {
      exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
    compile "org.apache.ivy:ivy:$ivyVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"

    // Unit tests
    testCompile"org.spockframework:spock-core:$spockVersion"
    testCompile "junit:junit:$junitVersion"

    // Groovydoc
    groovyDoc "org.fusesource.jansi:jansi:$jansiVersion"
    groovyDoc "$groovyGroupId:groovy-groovydoc:$groovyVersion"
    groovyDoc "$groovyGroupId:groovy-ant:$groovyVersion"
  }

  tasks.withType(Groovydoc) {
    groovyClasspath = project.configurations.groovyDoc
  }

  groovydoc {
    //
  }

  task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task groovydocJar(type: Jar, dependsOn:groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
  }

  task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
  }

  artifacts {
    archives sourcesJar 
    archives groovydocJar
    testArtifacts testJar
  }
   
  test {
    //testLogging.showStandardStreams = true
    useJUnit {
      includeCategories 'ch.grengine.jexler.test.FastTests'
    }
    //afterTest { desc, result ->
    //  println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    //}
  }

  jacoco {
    toolVersion = "0.8.8"
  }

  task slowTests(type: Test, dependsOn: 'test') {
    //testLogging.showStandardStreams = true
    useJUnit {
      includeCategories 'ch.grengine.jexler.test.SlowTests'
    }
  }
  
  task demoTests(type: Test) {
    testLogging.showStandardStreams = true
    useJUnit {
      includeCategories 'ch.grengine.jexler.test.DemoTests'
    }
  }

  task jacoco(type:JacocoReport, dependsOn: 'slowTests') {
    executionData test, slowTests
    sourceSets sourceSets.main
  }

  task jacocoFast(type:JacocoReport, dependsOn: 'test') {
    executionData test
    sourceSets sourceSets.main
  }

  task pom {
    doLast {
      pom {
        project {
          name 'jexler'
          description project.description
          url 'https://grengine.ch/jexler/'
          packaging project.ext.pkg
          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'https://www.apache.org/licenses/LICENSE-2.0'
              distribution 'repo'
            }
          }
          scm {
            url 'https://github.com/alainstalder/jexler'
            connection 'https://github.com/alainstalder/jexler.git'
            developerConnection 'https://github.com/alainstalder/jexler.git'
          }
          developers {
            developer {
              id 'alainstalder'
              name 'Alain Stalder'
              email 'astalder@span.ch'
            }
          }
        }
      }.writeTo("$buildDir/libs/${project.name}-${project.version}.pom")
    }
  }

}
